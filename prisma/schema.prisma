generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PurchaseStatus {
  PENDING
  PENDING_DELIVERY
  DELIVERING
  COMPLETED
  CANCELLED
  CANCELLING
  RETURNING
}

enum ProductStatus {
  INACTIVE
  ACTIVE
  SOLDOUT
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  REFUNDED
}

model User {
  id String @id @default(uuid())

  provider   String
  providerId String @unique

  isAdmin Boolean @default(false)

  orders Order[]

  name      String?
  email     String? @unique
  password  String?
  phone     String?
  deliveryName   String?
  deliveryPhone   String?
  address   String?
  detailedAddress   String?
  zipcode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart   Cart?

  @@index([providerId])
}

model Order {
  id     String @id

  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId String

  products Product[]
  orderContent Json

  status  PurchaseStatus
  paymentStatus PaymentStatus @default(PENDING)
  paymentKey String?
  paymentMethod String?
  virtualAccountInfo Json?
  price Int
  discount Int

  trackingNumber String?
  trackingCompany String?

  couponApplied Coupon? @relation(fields: [couponAppliedId], references: [id], onDelete: NoAction)
  couponAppliedId Int?

  deliveryAddress DeliveryAddress?

  isCanceled Boolean @default(false)
  isRefunded Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, id])
  @@index([paymentKey])
}

model DeliveryAddress {
  id String @id @default(uuid())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String @unique

  name String
  phone String
  address String
  detailedAddress String
  zipcode String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int           @id @default(autoincrement())
  status      ProductStatus @default(ACTIVE)
  name        String
  price       Int
  discount    Int           @default(0)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  isNew Boolean @default(true)
  isRecommended Boolean @default(false)


  order Order[]
  category Category[]
  subCategory SubCategory[]

  stock    Int     @default(0)

  productMainImages ProductMainImage[]
  productImages     ProductImage[]
  options           String[]

  specialDelivery Boolean @default(false)

  delivery Boolean @default(false)

  cartItems CartItem[]

  @@index([id])
}

model ProductMainImage {
  id       Int    @id @default(autoincrement())
  url      String
  filename String
  filetype String
  order    Int    @default(0)

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@index([productId])
  @@index([order])
}

model ProductImage {
  id       Int    @id @default(autoincrement())
  url      String
  filename String
  filetype String
  order    Int    @default(0)

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@index([productId])
  @@index([order])
}

model Notice {
  id       Int    @id @default(autoincrement())
  title    String
  content  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Category {
  id       Int    @id @default(autoincrement())
  name     String
  subCategory SubCategory[]
  product Product[]

  categoryThumbnail CategoryThumbnail[]

  @@index([id])
}

model SubCategory {
  id       Int    @id @default(autoincrement())
  name     String
  product Product[]
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int

  categoryThumbnail CategoryThumbnail[]

  @@index([categoryId])
}


model CategoryThumbnail {
  id       Int    @id @default(autoincrement())
  url      String
  filename String
  filetype String

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int?

  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  subCategoryId Int?

  @@index([categoryId])
  @@index([subCategoryId])
}


model Post {
  id       Int    @id @default(autoincrement())
  title    String
  content  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  readCount Int @default(0)

  busCategory BusCategory[]
  thumbnail PostThumbnail[]

  @@index([id])
}

model Events {
  id       Int    @id @default(autoincrement())
  title    String
  content  String?

  active Boolean @default(true)

  thumbnail EventsThumbnail[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventsThumbnail {
  id       Int    @id @default(autoincrement())
  url      String
  filename String
  filetype String

  events Events @relation(fields: [eventsId], references: [id], onDelete: Cascade)
  eventsId Int
}

model BusCategory {
  id       Int    @id @default(autoincrement())
  name     String
  post Post[]
}

model PostThumbnail {
  id       Int    @id @default(autoincrement())
  url      String
  filename String
  filetype String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@index([postId])
}

model Coupon {
  id       Int    @id @default(autoincrement())
  code     String @unique
  active   Boolean @default(true)

  flatDiscount Int?
  discountRate Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  orders Order[]
}

model Cart {
  id        String   @id @default(uuid())

  user      User     @relation(fields: [providerId], references: [providerId], onDelete: Cascade)
  providerId    String   @unique // One user can have only one cart

  items     CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([providerId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
  selectedOption    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId])
  @@index([productId])
}

model TemporaryOrder {
  id        String   @id
  userId    String
  orderData Json
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}



